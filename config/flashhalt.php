<?php

return [
    /*
    |--------------------------------------------------------------------------
    | FlashHALT Operating Mode
    |--------------------------------------------------------------------------
    |
    | This setting determines how FlashHALT operates in your application.
    | 
    | 'auto' - Automatically detects the appropriate mode based on environment
    | 'development' - Forces development mode with dynamic controller resolution
    | 'production' - Forces production mode with compiled static routes
    |
    | In most cases, 'auto' provides the best experience by adapting to your
    | environment automatically. Development environments get the flexibility
    | of dynamic resolution, while production gets the security and performance
    | of compiled routes.
    |
    */
    'mode' => env('FLASHHALT_MODE', 'auto'),

    /*
    |--------------------------------------------------------------------------
    | Development Mode Configuration
    |--------------------------------------------------------------------------
    |
    | These settings control FlashHALT's behavior in development mode, where
    | controller resolution happens dynamically for maximum developer velocity.
    | Development mode prioritizes helpful debugging and fast iteration over
    | maximum performance.
    |
    */
    'development' => [
        /*
        | Cache TTL for controller resolution results in seconds.
        | Higher values improve performance but may cache stale results longer.
        | Set to 0 to disable caching entirely (not recommended for performance).
        */
        'cache_ttl' => env('FLASHHALT_DEV_CACHE_TTL', 3600),

        /*
        | Enable comprehensive debug mode with detailed error reporting,
        | request tracing, and performance metrics. This should be disabled
        | in shared development environments for security.
        */
        'debug_mode' => env('FLASHHALT_DEBUG', env('APP_DEBUG', false)),

        /*
        | Rate limiting for HTMX requests (requests per minute per IP).
        | This prevents abuse during development while allowing normal usage.
        | Set to 0 to disable rate limiting entirely.
        */
        'rate_limit' => env('FLASHHALT_DEV_RATE_LIMIT', 120),

        /*
        | Whitelist specific controllers for enhanced security in development.
        | When empty, all controllers in the standard Laravel locations are allowed.
        | When populated, only listed controllers can be accessed via FlashHALT.
        | 
        | Example: ['UserController', 'Admin\\PostController']
        */
        'allowed_controllers' => [],

        /*
        | Enable detailed logging of controller resolution for debugging.
        | This creates logs that help you understand how FlashHALT is processing
        | requests and can be valuable for troubleshooting complex scenarios.
        */
        'enable_resolution_logging' => env('FLASHHALT_LOG_RESOLUTION', false),

        /*
        | Automatically clear resolution cache when controller files are modified.
        | This ensures you always get fresh results during development but
        | requires file system monitoring (may impact performance).
        */
        'auto_cache_invalidation' => env('FLASHHALT_AUTO_INVALIDATE', true),
    ],

    /*
    |--------------------------------------------------------------------------
    | Production Mode Configuration
    |--------------------------------------------------------------------------
    |
    | These settings control FlashHALT's behavior in production mode, where
    | routes are pre-compiled for maximum security and performance. Production
    | mode prioritizes reliability and speed over development convenience.
    |
    */
    'production' => [
        /*
        | Path where compiled routes will be stored and loaded from.
        | This file is generated by 'php artisan flashhalt:compile' and should
        | be included in your deployment process.
        */
        'compiled_routes_path' => base_path('routes/flashhalt-compiled.php'),

        /*
        | Require route compilation verification in production environments.
        | When enabled, FlashHALT will throw an exception if it detects
        | production mode without compiled routes, preventing silent failures.
        */
        'verification_required' => env('FLASHHALT_REQUIRE_COMPILATION', true),

        /*
        | Enable performance monitoring and metrics collection.
        | This provides insights into FlashHALT's operation in production
        | without impacting performance significantly.
        */
        'monitoring_enabled' => env('FLASHHALT_MONITORING', false),

        /*
        | Automatically include compiled routes in Laravel's route caching.
        | This provides maximum performance by leveraging Laravel's optimized
        | route loading mechanisms.
        */
        'enable_route_caching' => env('FLASHHALT_ROUTE_CACHE', true),

        /*
        | Production-specific error handling behavior.
        | Controls how errors are logged and reported without exposing
        | sensitive information to end users.
        */
        'error_reporting' => [
            'log_errors' => true,
            'include_stack_traces' => false,
            'notify_on_compilation_errors' => true,
        ],
    ],

    /*
    |--------------------------------------------------------------------------
    | Security Configuration
    |--------------------------------------------------------------------------
    |
    | FlashHALT implements multiple layers of security validation to ensure
    | that dynamic controller resolution cannot be exploited. These settings
    | control the security mechanisms and should be carefully considered.
    |
    */
    'security' => [
        /*
        | Comprehensive blacklist of methods that should never be callable
        | through FlashHALT, regardless of their visibility or controller.
        | This list includes dangerous PHP magic methods and Laravel internals.
        */
        'method_blacklist' => [
            // PHP Magic Methods - Can expose internal state or cause unexpected behavior
            '__construct', '__destruct', '__call', '__callStatic',
            '__get', '__set', '__isset', '__unset', '__sleep', '__wakeup',
            '__toString', '__invoke', '__set_state', '__clone', '__debugInfo',
            
            // Laravel Controller Internals - Should not be directly accessible
            'getRouteKey', 'getRouteKeyName', 'resolveRouteBinding',
            'resolveChildRouteBinding', 'middleware', 'getMiddleware',
            'callAction', 'dispatch', 'authorize', 'authorizeResource',
            
            // Common Dangerous Methods - Could expose sensitive functionality
            'getConnection', 'getTable', 'getFillable', 'getGuarded',
            'getKeyName', 'getKey', 'getRouteKey', 'getRouteKeyName',
            
            // File System Operations - Prevent potential file manipulation
            'file', 'download', 'export', 'import', 'upload'
        ],

        /*
        | Additional method patterns to block using regular expressions.
        | This provides flexible blocking of method patterns that might
        | be dangerous or inappropriate for HTTP access.
        */
        'method_pattern_blacklist' => [
            '/^_.*/',           // Block any method starting with underscore
            '/.*[Pp]assword.*/', // Block methods containing "password"
            '/.*[Tt]oken.*/',   // Block methods containing "token"
            '/.*[Ss]ecret.*/',  // Block methods containing "secret"
        ],

        /*
        | Require explicit authorization for all FlashHALT requests.
        | When enabled, all dynamically resolved methods must pass
        | Laravel's authorization system before execution.
        */
        'require_authorization' => env('FLASHHALT_REQUIRE_AUTH', false),

        /*
        | Enable automatic CSRF protection for non-GET requests.
        | This integrates with Laravel's CSRF middleware to ensure
        | that state-changing operations are properly protected.
        */
        'csrf_protection' => env('FLASHHALT_CSRF', true),

        /*
        | Validate that controller methods have appropriate HTTP method restrictions.
        | This ensures that destructive operations can't be called via GET requests
        | even when accessed through FlashHALT.
        */
        'enforce_http_method_semantics' => true,

        /*
        | Enable IP-based rate limiting for additional protection against abuse.
        | This works in conjunction with the general rate limiting but focuses
        | specifically on preventing malicious scanning and exploitation attempts.
        */
        'enable_security_rate_limiting' => env('FLASHHALT_SECURITY_LIMITING', true),

        /*
        | Security headers to add to all FlashHALT responses.
        | These headers provide additional protection against common attacks
        | and help ensure secure communication.
        */
        'response_headers' => [
            'X-Content-Type-Options' => 'nosniff',
            'X-Frame-Options' => 'DENY',
            'X-XSS-Protection' => '1; mode=block',
        ],
    ],

    /*
    |--------------------------------------------------------------------------
    | Route Compilation Configuration
    |--------------------------------------------------------------------------
    |
    | These settings control how FlashHALT analyzes your Blade templates and
    | generates optimized route definitions for production deployment. The
    | compilation process is what transforms FlashHALT from development tool
    | to production-ready system.
    |
    */
    'compilation' => [
        /*
        | Directories to scan for Blade templates during compilation.
        | FlashHALT will recursively search these directories for files
        | containing HTMX patterns that reference FlashHALT routes.
        */
        'template_directories' => [
            resource_path('views'),
        ],

        /*
        | File patterns to include during template scanning.
        | Only files matching these patterns will be analyzed for
        | HTMX routes during the compilation process.
        */
        'template_patterns' => [
            '*.blade.php',
            '*.php', // For PHP views that might contain HTMX
        ],

        /*
        | File patterns to exclude from template scanning.
        | These patterns help avoid scanning irrelevant files and
        | can improve compilation performance significantly.
        */
        'exclude_patterns' => [
            'vendor/*',
            'storage/*',
            'node_modules/*',
            '.git/*',
            '*.min.*', // Minified files are unlikely to contain HTMX patterns
        ],

        /*
        | Enable aggressive route optimization during compilation.
        | This generates the most efficient possible route definitions
        | but may be incompatible with some advanced routing features.
        */
        'optimize_routes' => env('FLASHHALT_OPTIMIZE_ROUTES', true),

        /*
        | Generate route names for compiled routes automatically.
        | This allows compiled routes to be referenced by name just like
        | manually defined routes, improving Laravel integration.
        */
        'generate_route_names' => env('FLASHHALT_ROUTE_NAMES', true),

        /*
        | Include middleware detection and application in compiled routes.
        | When enabled, FlashHALT will attempt to detect and apply appropriate
        | middleware to compiled routes based on controller configuration.
        */
        'detect_middleware' => env('FLASHHALT_DETECT_MIDDLEWARE', true),

        /*
        | Validation level for compilation process.
        | 'strict' - Fail compilation if any referenced controllers/methods don't exist
        | 'warning' - Generate warnings but continue compilation
        | 'permissive' - Generate routes even for questionable references
        */
        'validation_level' => env('FLASHHALT_VALIDATION', 'strict'),

        /*
        | Enable generation of compilation reports.
        | These reports provide detailed information about what routes were
        | compiled, what issues were encountered, and optimization suggestions.
        */
        'generate_reports' => env('FLASHHALT_REPORTS', true),
    ],

    /*
    |--------------------------------------------------------------------------
    | Performance and Caching Configuration
    |--------------------------------------------------------------------------
    |
    | FlashHALT implements sophisticated caching strategies to ensure that
    | dynamic controller resolution doesn't impact application performance.
    | These settings control caching behavior and optimization strategies.
    |
    */
    'performance' => [
        /*
        | Cache store to use for FlashHALT's internal caching.
        | This should be a fast cache store (like Redis or Memcached) for
        | best performance, but can fall back to file cache if needed.
        */
        'cache_store' => env('FLASHHALT_CACHE_STORE', env('CACHE_DRIVER', 'file')),

        /*
        | Enable cache warming during application bootstrap.
        | This pre-loads commonly used controller resolution results
        | for faster response times on the first requests.
        */
        'enable_cache_warming' => env('FLASHHALT_CACHE_WARMING', false),

        /*
        | Controllers to pre-warm in cache during bootstrap.
        | These controllers will have their resolution results cached
        | immediately when the application starts up.
        */
        'cache_warm_controllers' => [
            // Example: 'UserController', 'DashboardController'
        ],

        /*
        | Enable memory-based caching for single-request optimization.
        | This keeps resolution results in memory for the duration of a
        | single request, providing significant performance improvements.
        */
        'enable_memory_cache' => true,

        /*
        | Maximum memory usage for per-request caching in MB.
        | This prevents memory bloat in long-running processes while
        | still providing performance benefits for normal requests.
        */
        'memory_cache_limit' => 10,
    ],

    /*
    |--------------------------------------------------------------------------
    | Integration and Compatibility Configuration
    |--------------------------------------------------------------------------
    |
    | These settings control how FlashHALT integrates with other Laravel
    | packages and features, ensuring compatibility with the broader ecosystem.
    |
    */
    'integration' => [
        /*
        | Enable integration with Laravel Telescope for debugging.
        | When Telescope is installed, FlashHALT will provide detailed
        | information about route resolution and performance.
        */
        'telescope_integration' => env('FLASHHALT_TELESCOPE', true),

        /*
        | Enable integration with Laravel Horizon for queue monitoring.
        | This provides insights into any background jobs triggered by
        | FlashHALT route processing.
        */
        'horizon_integration' => env('FLASHHALT_HORIZON', true),

        /*
        | Enable integration with Laravel Debugbar.
        | Provides detailed timing and query information for FlashHALT
        | operations during development.
        */
        'debugbar_integration' => env('FLASHHALT_DEBUGBAR', true),

        /*
        | Custom response macros to register for HTMX integration.
        | These macros provide convenient methods for generating
        | HTMX-optimized responses from your controllers.
        */
        'response_macros' => [
            'htmx' => true,           // Enable htmx() response macro
            'htmxRedirect' => true,   // Enable htmxRedirect() response macro
            'htmxRefresh' => true,    // Enable htmxRefresh() response macro
        ],

        /*
        | Enable automatic HTMX header processing.
        | This automatically handles common HTMX headers and provides
        | convenient access to HTMX-specific request information.
        */
        'process_htmx_headers' => true,
    ],

    /*
    |--------------------------------------------------------------------------
    | Monitoring and Observability Configuration
    |--------------------------------------------------------------------------
    |
    | FlashHALT can provide detailed monitoring and observability data to help
    | you understand how it's being used and performing in your application.
    |
    */
    'monitoring' => [
        /*
        | Enable performance monitoring and metrics collection.
        | This tracks route resolution times, cache hit rates, and other
        | performance indicators without significantly impacting performance.
        */
        'enabled' => env('FLASHHALT_MONITORING', false),

        /*
        | Metrics to collect during FlashHALT operation.
        | Each enabled metric provides specific insights into different
        | aspects of FlashHALT's performance and usage patterns.
        */
        'metrics' => [
            'resolution_time' => true,    // Track controller resolution performance
            'cache_hit_rate' => true,     // Monitor caching effectiveness
            'error_rate' => true,         // Track resolution and execution errors
            'usage_patterns' => true,     // Analyze which routes are used most
        ],

        /*
        | External monitoring service integrations.
        | Configure connections to external monitoring services for
        | comprehensive application observability.
        */
        'external_services' => [
            'sentry' => [
                'enabled' => env('FLASHHALT_SENTRY', false),
                'trace_performance' => true,
            ],
            'datadog' => [
                'enabled' => env('FLASHHALT_DATADOG', false),
                'custom_tags' => [],
            ],
        ],
    ],
];